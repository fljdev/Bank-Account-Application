package accountpackage;

import java.io.*;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class FileClass {
	public static final int SIZE = 1000; // bytes for item being read back

	Record[] rec;
	Record aRecord;

	Hash h;
	int pos = -1;
	boolean slotOk = false;

	protected static String defaultFileName = "TestFile.dat";

	private RandomAccessFile file = null;

	private RandomRecord randRecWrite = null;
	private RandomRecord randRecRead = null;

	public FileClass(Record[] recA, String but) throws IOException {

		rec = recA;
		if (but.equals("save")) {
			saveToFile(rec);
		} else if (but.equals("saveAs")) {
			saveAs(rec);

		} else if (but.equals("open")) {
			select();
			readFromFile();
			rebootGui(readFromFile());

		}
	}// end constructor

	public void rebootGui(Record[] r) {
		//int mainArray = Driver.recordArray.length;
		//System.out.println("got here, main arara: " + mainArray);
		/*
		 * just check that the records are coming into this method in the right
		 * position etc
		 */
		for (int i = 0; i < 25; i++) {
			if (r[i] != null) {
				System.out.println("at position " + i);
				System.out.println(r[i].getAccountNumber());

				/*
				 * Repopulate the gui
				 */

				startGui.accIdT.setText(String.valueOf(r[i].getAccountId()));
				startGui.accNoT.setText(r[i].getAccountNumber());
				startGui.sNameT.setText(r[i].getSurname());
				startGui.fNameT.setText(r[i].getFirstName());
				startGui.typeT.setText(r[i].getAccountType());
				startGui.balanceT.setText(String.valueOf(r[i].getBalance()));
				startGui.overdraftT
						.setText(String.valueOf(r[i].getOverdraft()));
				startGui.interestRateT.setText(String.valueOf(r[i].getRate())
						+ "%");

				++Driver.autoId;

			}
		}// end for
		
	}

	public Record[] readFromFile() throws IOException {

		try {
			file = new RandomAccessFile(defaultFileName, "r");
			System.out.println(defaultFileName + " has been found and opened");

		} catch (IOException e) {
			System.out.println("File not found");
		}

		try {

			for (int i = 0; i < 25; i++) {
				randRecRead = new RandomRecord();
				file.seek(i * SIZE);
				randRecRead.read(file);

				/*
				 * this will check all elements of the file if account is !=0,
				 * that means it has a number(autogenerated which will never be
				 * 0) therefore I can store them somewhere before adding them
				 * back to memory Gui
				 */
				if (randRecRead.getAccountId() != 0) {
					String acNo = randRecRead.getAccountNumber();
					System.out.println("Account no : " + acNo);

					int id = randRecRead.getAccountId();
					String accNum = randRecRead.getAccountNumber();
					String surname = randRecRead.getSurname();
					String firstName = randRecRead.getFirstName();
					String accType = randRecRead.getAccountType();
					double balance = randRecRead.getBalance();
					double overdraft = randRecRead.getOverdraft();
					// int position = randRecRead.getPosition();
					double rate = randRecRead.getRate();

					/*
					 * now I will use the hash function to decide where to place
					 * this element in the array
					 */

					int position = getPos(accNum);

					aRecord = new Record(id, accNum, surname, firstName,
							accType, balance, overdraft, position, rate);

					// sortedRecords[position]=aRecord;
					Driver.recordArray[position] = aRecord;
					// rebootGUI(position);

					/*
					 * THIS IS WERE I NOTICED THE PROBLEM WITH WHAT I AM REDAING
					 * BACK IN I have tried re-doing it, breaking it apart,
					 * trying things in diffreent modules etc, i cannot get to
					 * the bottom of why it is not reading correctly I check
					 * things through println statements up to the last possible
					 * moment when I am saving, and as far as I can see, the
					 * save sile method is correct?? I suspect it may have
					 * something to do with the buffer size? or amount of bytes
					 * I am allocating/not allocating? I have tryied adjusting
					 * these and nothing changed
					 * 
					 * (EDIT.....FIXED NOW!!!)
					 */
					System.out.println(aRecord.toString());
				}// end if
			}

			file.close();
		} catch (IOException ex) {
		}
		return Driver.recordArray;
	}

	public int getPos(String acc) {
		h = new Hash();
		int pos = -1;
		pos = h.getH(acc);
		return pos;
	}

	public void saveToFile(Record[] rec) {

		try {
			file = new RandomAccessFile(defaultFileName, "rw");
			for (int i = 0; i < rec.length; i++) {
				if (rec[i] != null) {

					/*
					 * The following code is just to check that the correct
					 * values in the correct formats are being sent to the file
					 */

					String sId, sType, sBal, sOd, sRate, sSurname, sFName, sAcNum, sPos;

					sId = String.valueOf(rec[i].getAccountId());
					sAcNum = sSurname = String.valueOf(rec[i]
							.getAccountNumber());
					sSurname = String.valueOf(rec[i].getSurname());
					sFName = String.valueOf(rec[i].getFirstName());
					sType = String.valueOf(rec[i].getAccountType());
					sBal = String.valueOf(rec[i].getBalance());
					sOd = String.valueOf(rec[i].getOverdraft());
					sRate = String.valueOf(rec[i].getRate());
					sPos = String.valueOf(i);

					/**
					 * System.out.println("-----Values saved (String)--\n");
					 * System.out.println(sId); System.out.println(sAcNum);
					 * System.out.println(sSurname); System.out.println(sFName);
					 * System.out.println(sType); System.out.println(sBal);
					 * System.out.println(sOd); System.out.println(sRate);
					 * System.out.println(sPos);
					 */

					int id = Integer.parseInt(sId);
					int posit = Integer.parseInt(sPos);
					double bal = Double.parseDouble(sBal);
					double over = Double.parseDouble(sOd);
					double rate = Double.parseDouble(sRate);

					randRecWrite = new RandomRecord(id, sAcNum, sSurname,
							sFName, sType, bal, over, posit, rate);

					System.out.println("Random rec to string "
							+ randRecWrite.toString());

					/*
					 * Now I am sure the data is being saved to Random file, I
					 * will write the record to seek(i), with (i) being by
					 * default the position number that the record was hashed to
					 * at the point of creation
					 */

					file.seek(i * SIZE);
					randRecWrite.write(file);
					System.out.println("Added " + rec[i].getSurname()
							+ "'s record at hash " + i);

				} else {
					System.out.println(i + " is empty....");
				}
			}

			file.close();
		} catch (Exception e) {
			System.out.println("Something went wrong.");
		}
	}

	public String select() {

		String selected = "";

		try {
			JFileChooser fileChooser = new JFileChooser();
			File workingDirectory = new File(System.getProperty("user.dir"));
			fileChooser.setCurrentDirectory(workingDirectory);
			int returnValue = fileChooser.showOpenDialog(null);

			if (returnValue == JFileChooser.APPROVE_OPTION) {

				File selectedFile = fileChooser.getSelectedFile();
				selected = selectedFile.getName();
			}

			System.out.println("You are opening " + selected);
			open(selected);
			defaultFileName = selected;
		} catch (Exception e) {
		}
		return selected;
	}

	public void open(String selected) {

		try {

			String substring = selected.substring(Math.max(
					selected.length() - 4, 0));
			if ((substring.equalsIgnoreCase(".dat"))
					|| (substring.equalsIgnoreCase(".bin"))) {
				JOptionPane.showMessageDialog(null, "Loading  Files");
			} else {
				JOptionPane.showMessageDialog(null, "INCOMPATIBLE FILE TYPE!!",
						"Warning", JOptionPane.WARNING_MESSAGE);
			}

		} catch (Exception e) {
		}
	}

	/**
	 * public void saveAs(Record[] rec){
	 * 
	 * JFileChooser chooser = new JFileChooser(); FileNameExtensionFilter filter
	 * = new FileNameExtensionFilter( "BIN & DAT Files", "dat",
	 * "bin","DAT","BIN"); chooser.setFileFilter(filter); int returnVal =
	 * chooser.showOpenDialog(chooser); if(returnVal ==
	 * JFileChooser.APPROVE_OPTION) {
	 * System.out.println("You chose to open this file: " +
	 * chooser.getSelectedFile().getName()); } }
	 */

	public void saveAs(Record[] rec) {

		String selected = "";

		JFileChooser fileChooser = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir"));
		fileChooser.setCurrentDirectory(workingDirectory);
		fileChooser.setApproveButtonText("Save");
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
				"BIN & DAT Files", "dat", "bin", "DAT", "BIN");
		fileChooser.setFileFilter(filter);
		fileChooser.setApproveButtonToolTipText("Save Your File On Disk!!");
		int returnValue = fileChooser.showOpenDialog(null);

		if (returnValue == JFileChooser.APPROVE_OPTION) {

			File selectedFile = fileChooser.getSelectedFile();
			selected = selectedFile.getName();
		}

		String substring = selected
				.substring(Math.max(selected.length() - 4, 0));
		if ((substring.equalsIgnoreCase(".dat"))
				|| (substring.equalsIgnoreCase(".bin"))) {
			JOptionPane.showMessageDialog(null, "Saving  Data to Disk!!");
			System.out.println("You are saving as" + selected);
			defaultFileName = selected;
			saveToFile(rec);
		} else {
			JOptionPane.showMessageDialog(null,
					"Sorry, Only .DAT and .BIN Files can be handled!!",
					"Warning", JOptionPane.WARNING_MESSAGE);
		}

	}

}